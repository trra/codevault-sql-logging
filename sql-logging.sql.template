{%- connect settings = "@codevault/sql-logging" -%}
{%- fetch package = 'package.json' -%}
{%- fetch core = 'core.json' -%}
{%- fetch tables = 'tables.json' -%}
{%- set dataTypes = core.dataTypes -%}
{%- set schemaName = table.records.schemaName if table.records.schemaName else settings.schemaName -%}
{%- set internalColumns = core.internalColumns | pickBy(core.objectType.logging) -%}

PRINT '--- codeVault package [{{package.name}}:{{package.version}}]'

IF NOT EXISTS ( SELECT 1 FROM sys.schemas WHERE name = '{{schemaName}}' ) 
  EXEC ( 'CREATE SCHEMA [{{schemaName}}] AUTHORIZATION [dbo]' );

PRINT '--- CREATE TABLES ---'
{% import 'create.sql' as create -%}
{% for objectName, table in tables %}
  {%- if table.type in ['Table'] -%}
    {{ create.createTable(table, internalColumns, settings, dataTypes) }}
  {%- endif -%}
{% endfor %}

PRINT '--- CREATE FUNCTIONS ---'
{% include 'fn/formatMessage.sql' %}
{% include 'fn/packageInfo.sql' %}
{% include 'fn/version.sql' %}


PRINT '--- CREATE PROCEDURES ---'
{% for logLevel in settings.logLevels %}
  {%- set procedure = {name: logLevel} -%}
  {%- set table = tables.records -%}
  {{- create.spMessage(procedure, table, internalColumns, settings, dataTypes) }}
{% endfor %}

Exec [{{schemaName}}].info 'codevault-20191231', '{{package.name}}', 'main', 'Code generation succeeded'
Exec [{{schemaName}}].info 'codevault-20191231', '{{package.name}}', 'settings', '{{settings | dump | safe}}'
Exec [{{schemaName}}].info 'codevault-20191231', '{{package.name}}', 'tables.json', '{{tables | dump | safe}}'
Exec [{{schemaName}}].info 'codevault-20191231', '{{package.name}}', 'core.json', '{{core | dump | safe}}'
